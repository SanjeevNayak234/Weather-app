{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\OneDrive\\\\Desktop\\\\weather_app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport StateSelector from './components/StateSelector';\nimport WeatherDisplay from './components/WeatherDisplay';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [error, setError] = useState(null);\n  const handleStateChange = async state => {\n    try {\n      const response = await fetch(`/api/weather/${state}`);\n\n      // Log response headers and content type for debugging\n      console.log('Response headers:', response.headers);\n      console.log('Content-Type:', response.headers.get('content-type'));\n      if (!response.ok) {\n        throw new Error(`Network response was not ok: ${response.statusText}`);\n      }\n\n      // Check if the response is JSON\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        const text = await response.text(); // Read response as text\n        throw new Error(`Expected JSON response, got ${contentType}: ${text}`);\n      }\n      const data = await response.json();\n\n      // Validate the data structure\n      if (typeof data.temperature !== 'number' || typeof data.chanceOfRain !== 'number') {\n        throw new Error('Received incomplete or invalid weather data');\n      }\n      setWeatherData(data);\n      setError(null); // Clear any previous errors\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n      setWeatherData(null);\n      setError('Failed to fetch weather data. Please try again later.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(StateSelector, {\n      onStateChange: handleStateChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this), weatherData ? /*#__PURE__*/_jsxDEV(WeatherDisplay, {\n      data: weatherData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Select a state to see the weather information.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"hyBnnJ0uX44fhLn3Cj8HjX61+/o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","StateSelector","WeatherDisplay","jsxDEV","_jsxDEV","App","_s","weatherData","setWeatherData","error","setError","handleStateChange","state","response","fetch","console","log","headers","get","ok","Error","statusText","contentType","includes","text","data","json","temperature","chanceOfRain","className","children","onStateChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/OneDrive/Desktop/weather_app/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport StateSelector from './components/StateSelector';\r\nimport WeatherDisplay from './components/WeatherDisplay';\r\nimport './styles.css';\r\n\r\nconst App = () => {\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleStateChange = async (state) => {\r\n    try {\r\n      const response = await fetch(`/api/weather/${state}`);\r\n\r\n      // Log response headers and content type for debugging\r\n      console.log('Response headers:', response.headers);\r\n      console.log('Content-Type:', response.headers.get('content-type'));\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Network response was not ok: ${response.statusText}`);\r\n      }\r\n\r\n      // Check if the response is JSON\r\n      const contentType = response.headers.get('content-type');\r\n      if (!contentType || !contentType.includes('application/json')) {\r\n        const text = await response.text(); // Read response as text\r\n        throw new Error(`Expected JSON response, got ${contentType}: ${text}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      // Validate the data structure\r\n      if (typeof data.temperature !== 'number' || typeof data.chanceOfRain !== 'number') {\r\n        throw new Error('Received incomplete or invalid weather data');\r\n      }\r\n\r\n      setWeatherData(data);\r\n      setError(null); // Clear any previous errors\r\n    } catch (error) {\r\n      console.error('Error fetching weather data:', error);\r\n      setWeatherData(null);\r\n      setError('Failed to fetch weather data. Please try again later.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <StateSelector onStateChange={handleStateChange} />\r\n      {error && <p className=\"error\">{error}</p>}\r\n      {weatherData ? (\r\n        <WeatherDisplay data={weatherData} />\r\n      ) : (\r\n        <p>Select a state to see the weather information.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}